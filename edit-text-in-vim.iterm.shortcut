-- opens VIM with temp file created from input, returns changed file contents
-- Released under MIT license by Normen Hansen

on run {input, parameters}
	-- Save calling application name to bring it back to front
	-- (disabled for now as bringing back to front doesn't work)
	--tell application "System Events"
	--	set originalAppName to name of first process whose frontmost is true
	--end tell
	
	-- Create temp file with text content for VIM to open.
	-- We're using "/tmp/" but it should be:
	-- (POSIX path of (path to temporary items folder from user domain))
	-- That doesn't work though, vim has no access to files there.
	-- Maybe Terminal.app has no access to that folder.
	set posixtmpfile to "/tmp/" & "vim_" & text 3 thru -1 of ((random number) as string)
	try
		set fhandle to open for access posixtmpfile with write permission
		write input to fhandle as «class utf8»
		close access fhandle
	on error
		try
			close access posixtmpfile
		end try
	end try
	
	set command to {"vim "}
	set end of command to (posixtmpfile as string)
	set end of command to ";exit"
	-- compile command
	set command to command as string
	
	set session_vim to my runCommandIniTerm(command)
	my waitCommandiniTerm(session_vim)
	
	-- read file contents and return
	set myString to (read posixtmpfile as «class utf8»)
	-- delete file posixtmpfile
	do shell script "/bin/rm " & quoted form of posixtmpfile
	-- TODO: bring original app to front again 
	-- Can't do it directly as the app is blocked by calling this applescript.
	-- Doing "tell application originalAppName to activate" causes a deadlock.
	-- Calling osascript as a background process doesn't work either.
	-- I guess it would be in order if Apple added that behavior
	-- automatically when selecting "replace text".
	return myString
end run

-- 通过session id搜索iTerm所有的session
on findSession(session_id)
	tell application "iTerm"
		repeat with ww in windows
			repeat with tt in ww's tabs
				repeat with ss in sessions of tt
					if id of ss = session_id then
						return ss
					end if
				end repeat
			end repeat
		end repeat
	end tell
	return false
end findSession

-- 在iTerm中运行cmd
on runCommandIniTerm(cmd)
	tell application "iTerm"
		activate
		set created to false
		if not (exists current window) then
			create window with default profile
			set created to true
		end if
		tell current window
			if not created then
				create tab with default profile
			end if
			set session_vim to current session
			-- log "session_vim:" & session_vim
			tell session_vim
				write text cmd
			end tell
		end tell
	end tell
	return session_vim
end runCommandIniTerm

-- 等待在iterm中运行的cmd完成
on waitCommandiniTerm(session_vim)
	-- 等待vim启动完成, 通过session
	repeat until name of session_vim starts with "vim"
		delay 1
	end repeat
	-- 获取session id, 用于后续的查找
	set session_vim_id to id of session_vim
	repeat
		-- 如果session不存在，则重新搜索
		if application "iTerm" is not running then
			exit repeat
		end if
		if not (exists session_vim) then
			set session_vim to my findSession(session_vim_id)
			if session_vim = false then
				exit repeat
			end if
		end if
		if name of session_vim does not start with "vim" then
			exit repeat
		end if
		delay 1
	end repeat
end waitCommandiniTerm
